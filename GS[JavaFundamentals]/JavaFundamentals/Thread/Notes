Process is instance of executing application.
For ex. when you open new application in your computer you start new process that will run on that application.
	- Process are heavy weighted. Its require their own separate memory in OS. that's why communication b/w two process takes time.
	- Switching from one process to another is very expensive.

Important notes on MultiThreading
---------------------------------
Thread are light weight process. A thread class belongs to java.lang package.

Simply, in layman’s term a thread is an independent working part of a program.

Consider example of Whatsapp. In Whatsapp, a user is able to receive and send simultaneously. 
This is because there are two threads in Whatsapp one for sending and other for receiving, both working simultaneously

Advantage of Thread : Suppose one thread needs 10 minutes to get certain task, 10 threads used at a time could complete that task in 1 minute, because threads can run parallely.
Threads consumes CPU in best possible manner, hence enables multi processing. Multi threading reduces idle time of CPU which improves performance of application.


Two type multitasking in JAVA
i)Process based : In process based multitasking or multiprocessing, Multiple processes are executed simultaneously that's why computer run
                  two or more application simultaneously.
 e.g. : - you open Chrome, calculator, MS Word, VLC player at the same time.
 
 
ii)Thread based (MultiThread) : In this multiple threads in a process are executed simultaneously
 e.g. : - you open MS Word there -you typing --> one thread handling that
 								 -checking for spelling mistake --> second thread handling that
   
******************************************************				 					
 ==>Creating thread 
 ------------------
 1)Using extending thread class
   -check creatingThread_1.java
   
   WHY THREAD CLASS start() method invoked?
   -it's responsible to register thread with thread scheduler and all other mandatory activity hence without executing 
    thread class start() method there is no chance of starting thread in java due to this, it's consider heart of multi thread.
   
   RULE:
   -when you overload run() method only without arguments run() method works in multi thread.
   -you only have to wtire(override) run method when you extends Thread class if you use other name then run() it's not works.
   -order of executing thread is unknown.
   -Don't override start() method if you do then your thread is not running mean multi thread concept is not works.
   -if we restart same thread again then we got error
   
 2)Implementing Runnable    
 	-it's in java.lang package
 	-it contains only one method public  abstract void run() method
 
 ==>Which one is Better?
  -Implementing Runnable  is better because if we have another class we can extends it or if we have another interface we can use it as well
   but by extending thread method we can't do that because java doen't support mulitple inheritance
    
******************************************************  
 ==>Thread Class Constructor:
   
   1)Thread(): Thread t = new Thread();
   2)Thread(Runable Target): 
     - MyThread myThread = new MyThread();
     - Thread t = new Thread(myThread)
     - Thread(String name): Thread t = new Thread("Rohan Thread")
       e.g. check ThreadConstructor.java
       -To provide our thread name we use this
     
   
******************************************************  
  ==>Important method of Thread
    1)void start() : To start thread and call run method inside your thread class
    
    2)Static Thread currentThread() :it returns reference to currently executing thread object. In short return thread name,thread priority, thread group
      e.g System.out.println(Thread.currentThread());
      
    3)String getName() - return name of thread 
    e.g. System.out.println(Thread.currentThread().getName());
    
    4)String setName() - change name
   
    
******************************************************  
  ==>Thread Priority 
    -it's determine how thread should be treated with respect to each other
    -valid range 1-10. 1-Minimum 10-Maximum
     Thread.MIN_PRIORITY -1
     Thread.NORM_PRIORITY - 5
     Thread.MAX_PRIORITY - 10
     
     Main Thread Priority - 5 
    
   
******************************************************   
  ==>yield() Method
	- it used to pause temporarily to currently executing thread and allow other 
	  waiting thread to execute.
	  
	-if we have too many thread and one thread took 10 hour to complete then other have to wait for their turn and execute so if we use 
	 yield() method then 10 hours thread pause and allow other thread to execute first. But this is not supported by all paltform
	 
  ==>join() method
    -if thread want to wait until completing some other thread then we used it.
    -we have to handle intrreptedException using try/catch or throws keyword
    
    -need to call join() method whichever thread is waiting. e.g. if we want main thread to wait then call join() in main thread.
                                                                  if we want child thread to wait then call join() in child thread.
  
  ==>sleep() method	   
    -it use to sleep temporarily to currently executing thread for specific number of seconds
   
  ==>interrupt() method
    -A thread can interrupt a sleeping thread or waiting thread by using interrupt() method of thread class

******************************************************
THREAD SYNCHRINIZATION
	 
-When we start two or more threads within a program, there may be a situation when multiple threads try to access
the same resource and finally they can produce unforeseen result due to concurrency issues

-For example, if multiple threads try to write within a same file then they may corrupt the data because one of the
threads can override data or while one thread is opening the same file at the same time another thread might be
closing the same file

-So there is a need to synchronize the action of multiple threads and make sure that only one thread can access the
resource at a given point in time
   
******************************************************
   ==>Deadlock: When two thread are waiting for each other for infinite period of time then deadlock occur.
    -join method when child class wait for main thread and main thread wait for child class then this happen e.g. JoinMethod.java & JoinMethod_1.java
    -when main class wait for main class(itself) to finish it.

******************************************************
Thread DUMP: More details visit : https://perfmatrix.blogspot.com/search?q=Thread

When you take thread Dump, JVM will dumps all thread state in log files

******************************************************
Thread states:

1. New 2. Runnable 3. Blocked 4. Waiting 5. Timed Waiting 6. Terminated

1. New: This is the initial state of the thread. When a thread is created, it is in the new state. 
   		The thread has not yet started to run when it is in this state. 

2. Runnable State: A thread that is ready to run is moved from New to Runnable state. In this state, 
	a thread might actually be running or it might be in Ready To Run state. 
	Once the thread comes in the Runnable state then it occupies the CPU and starts processing the code. 
	In this state, there is an intermediate state called "Ready To Run". 
	Such state comes because every thread runs for a short while and then pauses and relinquishes the CPU to another thread 
	so that other threads can get a chance to run. But all such threads lay under Runnable State whether they are in Ready To Run 
	or currently running state. It is the responsibility of the thread scheduler to give chance to each thread to run.

3. Blocked: A thread is in the blocked state when it tries to access a protected section of code that is currently locked by some other thread.
   When the protected section is unlocked, the schedule picks the blocked thread and move it to Runnable state. 
   In thread dump analysis, this state needs to keep in mind. 
   We need to analyse which threads were in the blocked state and what was the reason?

4. Waiting: When a thread is in the waiting state, it means the thread is waiting for the response from another thread to fulfil some 
  conditions. Once the condition fulfils then thread moves from Waiting to Runnable state. Similar to Blocked state, Waiting state also 
  plays an important role during thread dump analysis. We analyse which threads were in the waiting state and what was the cause?

5. Timed Waiting: A thread lies in the state of timed waiting when it calls a method like wait(), sleep(), join(), park() with a timeout
   parameter. A thread lies in this state until the timeout is completed or until a notification is received.

6. Terminated: When a thread terminates then it frees the occupancy of CPU and no longer exists. A thread terminates when either 
   the program has been executed completely or some unusual erroneous event, like segmentation fault or an unhandled exception occurred.
   
******************************************************
   join() vs yield() vs sleep()
   
If thread want to pause its execution to give the chance for remaning threads of same priority then we should user yield() method.

If thread wants to wait until completing some other thread to execution then we should use join() method.

If thread don't want to perform any operation for particular amount of time the we should use sleep() method.


Yield is not overloaded 	|join is overloaded | Sleep is overloaded
							|
Doesn't throw          		|join and sleep thorows Interreptedepted 
Interreptedepted Exception  | 					 

   

   
   
   
   
   
   
   
   
   
   
   
   
   									 				